#---------------------------------------------------------------------
# Example configuration.  See the full configuration manual online.
#
#   http://www.haproxy.org/download/1.7/doc/configuration.txt
#
#---------------------------------------------------------------------

global
    maxconn     8000
    log         /dev/log        local0
    log         127.0.0.1:514 local0
    user        haproxy
    group       haproxy
    nbthread    4
#    chroot      /usr/share/haproxy
    pidfile     /run/haproxy.pid

    ssl-default-bind-options ssl-min-ver TLSv1.2
    # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256

    ssl-dh-param-file /etc/haproxy/dhparams.pem

    daemon

defaults
    mode    tcp
    maxconn 25000
    timeout connect         5s
    timeout client          30s
    timeout server          10s
    timeout http-request    5s
    timeout http-keep-alive 30s
    retries 3
    option  redispatch
    log     global
    option  log-separate-errors
    option  log-health-checks

listen stats
    mode        http
    bind        :8888
    stats       enable
    stats       uri             /lb?stats
    stats       realm           Stats
    stats       show-desc       cmdcenter haproxy statistics
    stats       auth            lbstats:commandcenter
    stats       hide-version
    monitor-uri /lb?health

frontend k8master
    bind 0.0.0.0:6443

    default_backend k8masters

backend k8masters
    server server1 192.168.2.10:6443 check maxconn 32
    server server2 192.168.2.11:6443 check maxconn 32
    server server3 192.168.2.12:6443 check maxconn 32

frontend lb_ashokraja_in
    bind        0.0.0.0:80
    bind        0.0.0.0:443 ssl crt /etc/haproxy/ssl/ashokraja.in.pem

#   # Table definition
#   stick-table type ip size 100k expire 30s store conn_cur
#   # Allow clean known IPs to bypass the filter
#   tcp-request connection accept if { src -f /etc/haproxy/whitelist.lst }
#   # Shut the new connection as long as the client has already 10 opened
#   tcp-request connection reject if { src_conn_cur ge 10 }
#   tcp-request connection track-sc1 src
#
#   # Table definition
#   stick-table type ip size 100k expire 30s store conn_rate(3s)
#   # Allow clean known IPs to bypass the filter
#   tcp-request connection accept if { src -f /etc/haproxy/whitelist.lst }
#   # Shut the new connection as long as the client has already 10 opened
#   tcp-request connection reject if { src_conn_rate ge 10 }
#   tcp-request connection track-sc1 src
#
#   # Use General Purpose Couter (gpc) 0 in SC1 as a global abuse counter
#   # Monitors the number of request sent by an IP over a period of 10 seconds
#   stick-table type ip size 1m expire 10s store gpc0,http_req_rate(10s)
#   tcp-request connection track-sc1 src
#   tcp-request connection reject if { src_get_gpc0 gt 0 }
#
#   # Use General Purpose Couter 0 in SC1 as a global abuse counter
#   # Monitors the number of errors generated by an IP over a period of 10 seconds
#   stick-table type ip size 1m expire 10s store gpc0,http_err_rate(10s)
#   tcp-request connection track-sc1 src
#   tcp-request connection reject if { src_get_gpc0 gt 0 }

    redirect scheme https if !{ ssl_fc }

    mode        http

    option                  httplog
    option                  http-server-close
    no option               logasap  # disable early logging of HTTP requests so that total transfer time is logged

    compression algo gzip
    compression type text/html text/plain text/css application/javascript

    acl host_cloud              hdr(host) -i cloud.ashokraja.in
    acl host_storage            hdr(host) -i storage.ashokraja.in
    acl host_code               hdr(host) -i code.ashokraja.in
    acl host_mylife             hdr(host) -i mylife.ashokraja.in
    acl host_cmdcenter          hdr(host) -i cmdcenter.ashokraja.in
    acl host_finance            hdr(host) -i finance.ashokraja.in
    acl host_deluge             hdr(host) -i deluge.ashokraja.in

    use_backend cloud                           if host_cloud
    use_backend storage                         if host_storage
    use_backend vscode                          if host_code
    use_backend finance                         if host_finance
    use_backend cmdcenter                       if host_mylife
    use_backend deluge                          if host_deluge

    default_backend     cmdcenter

backend cloud
    mode        http
    server      metal01 192.168.2.7:8006 check ssl verify none maxconn 100

backend cmdcenter
    mode        http
    server      cmdcenter 127.0.0.1:8080 check maxconn 100

backend storage
    mode        http
    server      storage 192.168.2.3:443 check ssl verify none maxconn 50
    timeout     server 300s
    timeout     client 300s

backend vscode
    mode        http
    server      codengine 192.168.2.30:44444 check maxconn 100

backend finance
    mode        http
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    server      k8worker 192.168.2.83:8080 check maxconn 100

backend deluge
    mode        http
    server      atom    192.168.2.4:8112 check maxconn 100
